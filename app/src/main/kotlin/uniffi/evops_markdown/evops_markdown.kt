// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.evops_markdown

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_evops_markdown_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_evops_markdown_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "evops"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}


























































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun ffi_evops_markdown_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "evops_markdown"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            // Loading of library with integrity check done.
            lib
        }
        
    }

    // FFI functions
    fun ffi_evops_markdown_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_evops_markdown_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_evops_markdown_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_evops_markdown_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_evops_markdown_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_evops_markdown_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_evops_markdown_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_evops_markdown_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_evops_markdown_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_evops_markdown_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_evops_markdown_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_evops_markdown_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_evops_markdown_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_evops_markdown_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_evops_markdown_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_evops_markdown_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_evops_markdown_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_evops_markdown_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_evops_markdown_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_evops_markdown_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}



data class MarkdownBlockquote (
    var `children`: List<MarkdownRootChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownBlockquote: FfiConverterRustBuffer<MarkdownBlockquote> {
    override fun read(buf: ByteBuffer): MarkdownBlockquote {
        return MarkdownBlockquote(
            FfiConverterSequenceTypeMarkdownRootChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownBlockquote) = (
            FfiConverterSequenceTypeMarkdownRootChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownBlockquote, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownRootChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownCode (
    var `value`: kotlin.String, 
    var `position`: MarkdownPosition, 
    var `lang`: kotlin.String?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownCode: FfiConverterRustBuffer<MarkdownCode> {
    override fun read(buf: ByteBuffer): MarkdownCode {
        return MarkdownCode(
            FfiConverterString.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownCode) = (
            FfiConverterString.allocationSize(value.`value`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`) +
            FfiConverterOptionalString.allocationSize(value.`lang`)
    )

    override fun write(value: MarkdownCode, buf: ByteBuffer) {
            FfiConverterString.write(value.`value`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
            FfiConverterOptionalString.write(value.`lang`, buf)
    }
}



data class MarkdownDelete (
    var `children`: List<MarkdownParagraphChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownDelete: FfiConverterRustBuffer<MarkdownDelete> {
    override fun read(buf: ByteBuffer): MarkdownDelete {
        return MarkdownDelete(
            FfiConverterSequenceTypeMarkdownParagraphChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownDelete) = (
            FfiConverterSequenceTypeMarkdownParagraphChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownDelete, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownParagraphChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownEmphasis (
    var `children`: List<MarkdownParagraphChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownEmphasis: FfiConverterRustBuffer<MarkdownEmphasis> {
    override fun read(buf: ByteBuffer): MarkdownEmphasis {
        return MarkdownEmphasis(
            FfiConverterSequenceTypeMarkdownParagraphChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownEmphasis) = (
            FfiConverterSequenceTypeMarkdownParagraphChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownEmphasis, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownParagraphChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownHeading (
    var `children`: List<MarkdownParagraphChild>, 
    var `position`: MarkdownPosition, 
    var `depth`: MarkdownHeadingDepth
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownHeading: FfiConverterRustBuffer<MarkdownHeading> {
    override fun read(buf: ByteBuffer): MarkdownHeading {
        return MarkdownHeading(
            FfiConverterSequenceTypeMarkdownParagraphChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
            FfiConverterTypeMarkdownHeadingDepth.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownHeading) = (
            FfiConverterSequenceTypeMarkdownParagraphChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`) +
            FfiConverterTypeMarkdownHeadingDepth.allocationSize(value.`depth`)
    )

    override fun write(value: MarkdownHeading, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownParagraphChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
            FfiConverterTypeMarkdownHeadingDepth.write(value.`depth`, buf)
    }
}



data class MarkdownInlineCode (
    var `value`: kotlin.String, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownInlineCode: FfiConverterRustBuffer<MarkdownInlineCode> {
    override fun read(buf: ByteBuffer): MarkdownInlineCode {
        return MarkdownInlineCode(
            FfiConverterString.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownInlineCode) = (
            FfiConverterString.allocationSize(value.`value`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownInlineCode, buf: ByteBuffer) {
            FfiConverterString.write(value.`value`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownLink (
    var `children`: List<MarkdownLinkChild>, 
    var `position`: MarkdownPosition, 
    var `url`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownLink: FfiConverterRustBuffer<MarkdownLink> {
    override fun read(buf: ByteBuffer): MarkdownLink {
        return MarkdownLink(
            FfiConverterSequenceTypeMarkdownLinkChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownLink) = (
            FfiConverterSequenceTypeMarkdownLinkChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`) +
            FfiConverterString.allocationSize(value.`url`)
    )

    override fun write(value: MarkdownLink, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownLinkChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
            FfiConverterString.write(value.`url`, buf)
    }
}



data class MarkdownList (
    var `children`: List<MarkdownListItem>, 
    var `position`: MarkdownPosition, 
    var `ordered`: kotlin.Boolean, 
    var `spread`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownList: FfiConverterRustBuffer<MarkdownList> {
    override fun read(buf: ByteBuffer): MarkdownList {
        return MarkdownList(
            FfiConverterSequenceTypeMarkdownListItem.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownList) = (
            FfiConverterSequenceTypeMarkdownListItem.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`) +
            FfiConverterBoolean.allocationSize(value.`ordered`) +
            FfiConverterBoolean.allocationSize(value.`spread`)
    )

    override fun write(value: MarkdownList, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownListItem.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
            FfiConverterBoolean.write(value.`ordered`, buf)
            FfiConverterBoolean.write(value.`spread`, buf)
    }
}



data class MarkdownListItem (
    var `children`: List<MarkdownRootChild>, 
    var `position`: MarkdownPosition, 
    var `spread`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownListItem: FfiConverterRustBuffer<MarkdownListItem> {
    override fun read(buf: ByteBuffer): MarkdownListItem {
        return MarkdownListItem(
            FfiConverterSequenceTypeMarkdownRootChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownListItem) = (
            FfiConverterSequenceTypeMarkdownRootChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`) +
            FfiConverterBoolean.allocationSize(value.`spread`)
    )

    override fun write(value: MarkdownListItem, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownRootChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
            FfiConverterBoolean.write(value.`spread`, buf)
    }
}



data class MarkdownParagraph (
    var `children`: List<MarkdownParagraphChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownParagraph: FfiConverterRustBuffer<MarkdownParagraph> {
    override fun read(buf: ByteBuffer): MarkdownParagraph {
        return MarkdownParagraph(
            FfiConverterSequenceTypeMarkdownParagraphChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownParagraph) = (
            FfiConverterSequenceTypeMarkdownParagraphChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownParagraph, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownParagraphChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownPoint (
    var `line`: MarkdownCoordinate, 
    var `column`: MarkdownCoordinate, 
    var `offset`: MarkdownCoordinate
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownPoint: FfiConverterRustBuffer<MarkdownPoint> {
    override fun read(buf: ByteBuffer): MarkdownPoint {
        return MarkdownPoint(
            FfiConverterTypeMarkdownCoordinate.read(buf),
            FfiConverterTypeMarkdownCoordinate.read(buf),
            FfiConverterTypeMarkdownCoordinate.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownPoint) = (
            FfiConverterTypeMarkdownCoordinate.allocationSize(value.`line`) +
            FfiConverterTypeMarkdownCoordinate.allocationSize(value.`column`) +
            FfiConverterTypeMarkdownCoordinate.allocationSize(value.`offset`)
    )

    override fun write(value: MarkdownPoint, buf: ByteBuffer) {
            FfiConverterTypeMarkdownCoordinate.write(value.`line`, buf)
            FfiConverterTypeMarkdownCoordinate.write(value.`column`, buf)
            FfiConverterTypeMarkdownCoordinate.write(value.`offset`, buf)
    }
}



data class MarkdownPosition (
    var `start`: MarkdownPoint, 
    var `end`: MarkdownPoint
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownPosition: FfiConverterRustBuffer<MarkdownPosition> {
    override fun read(buf: ByteBuffer): MarkdownPosition {
        return MarkdownPosition(
            FfiConverterTypeMarkdownPoint.read(buf),
            FfiConverterTypeMarkdownPoint.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownPosition) = (
            FfiConverterTypeMarkdownPoint.allocationSize(value.`start`) +
            FfiConverterTypeMarkdownPoint.allocationSize(value.`end`)
    )

    override fun write(value: MarkdownPosition, buf: ByteBuffer) {
            FfiConverterTypeMarkdownPoint.write(value.`start`, buf)
            FfiConverterTypeMarkdownPoint.write(value.`end`, buf)
    }
}



data class MarkdownRoot (
    var `children`: List<MarkdownRootChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownRoot: FfiConverterRustBuffer<MarkdownRoot> {
    override fun read(buf: ByteBuffer): MarkdownRoot {
        return MarkdownRoot(
            FfiConverterSequenceTypeMarkdownRootChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownRoot) = (
            FfiConverterSequenceTypeMarkdownRootChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownRoot, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownRootChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownStrong (
    var `children`: List<MarkdownParagraphChild>, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownStrong: FfiConverterRustBuffer<MarkdownStrong> {
    override fun read(buf: ByteBuffer): MarkdownStrong {
        return MarkdownStrong(
            FfiConverterSequenceTypeMarkdownParagraphChild.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownStrong) = (
            FfiConverterSequenceTypeMarkdownParagraphChild.allocationSize(value.`children`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownStrong, buf: ByteBuffer) {
            FfiConverterSequenceTypeMarkdownParagraphChild.write(value.`children`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownText (
    var `value`: kotlin.String, 
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownText: FfiConverterRustBuffer<MarkdownText> {
    override fun read(buf: ByteBuffer): MarkdownText {
        return MarkdownText(
            FfiConverterString.read(buf),
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownText) = (
            FfiConverterString.allocationSize(value.`value`) +
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownText, buf: ByteBuffer) {
            FfiConverterString.write(value.`value`, buf)
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}



data class MarkdownThematicBreak (
    var `position`: MarkdownPosition
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownThematicBreak: FfiConverterRustBuffer<MarkdownThematicBreak> {
    override fun read(buf: ByteBuffer): MarkdownThematicBreak {
        return MarkdownThematicBreak(
            FfiConverterTypeMarkdownPosition.read(buf),
        )
    }

    override fun allocationSize(value: MarkdownThematicBreak) = (
            FfiConverterTypeMarkdownPosition.allocationSize(value.`position`)
    )

    override fun write(value: MarkdownThematicBreak, buf: ByteBuffer) {
            FfiConverterTypeMarkdownPosition.write(value.`position`, buf)
    }
}




enum class MarkdownHeadingDepth {
    
    MARKDOWN_HEADING_DEPTH1,
    MARKDOWN_HEADING_DEPTH2,
    MARKDOWN_HEADING_DEPTH3,
    MARKDOWN_HEADING_DEPTH4,
    MARKDOWN_HEADING_DEPTH5,
    MARKDOWN_HEADING_DEPTH6;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeMarkdownHeadingDepth: FfiConverterRustBuffer<MarkdownHeadingDepth> {
    override fun read(buf: ByteBuffer) = try {
        MarkdownHeadingDepth.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: MarkdownHeadingDepth) = 4UL

    override fun write(value: MarkdownHeadingDepth, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class MarkdownLinkChild {
    
    data class Text(
        val v1: MarkdownText) : MarkdownLinkChild() {
        companion object
    }
    
    data class Strong(
        val v1: MarkdownStrong) : MarkdownLinkChild() {
        companion object
    }
    
    data class Emphasis(
        val v1: MarkdownEmphasis) : MarkdownLinkChild() {
        companion object
    }
    
    data class Delete(
        val v1: MarkdownDelete) : MarkdownLinkChild() {
        companion object
    }
    
    data class InlineCode(
        val v1: MarkdownInlineCode) : MarkdownLinkChild() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownLinkChild : FfiConverterRustBuffer<MarkdownLinkChild>{
    override fun read(buf: ByteBuffer): MarkdownLinkChild {
        return when(buf.getInt()) {
            1 -> MarkdownLinkChild.Text(
                FfiConverterTypeMarkdownText.read(buf),
                )
            2 -> MarkdownLinkChild.Strong(
                FfiConverterTypeMarkdownStrong.read(buf),
                )
            3 -> MarkdownLinkChild.Emphasis(
                FfiConverterTypeMarkdownEmphasis.read(buf),
                )
            4 -> MarkdownLinkChild.Delete(
                FfiConverterTypeMarkdownDelete.read(buf),
                )
            5 -> MarkdownLinkChild.InlineCode(
                FfiConverterTypeMarkdownInlineCode.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MarkdownLinkChild) = when(value) {
        is MarkdownLinkChild.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownText.allocationSize(value.v1)
            )
        }
        is MarkdownLinkChild.Strong -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownStrong.allocationSize(value.v1)
            )
        }
        is MarkdownLinkChild.Emphasis -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownEmphasis.allocationSize(value.v1)
            )
        }
        is MarkdownLinkChild.Delete -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownDelete.allocationSize(value.v1)
            )
        }
        is MarkdownLinkChild.InlineCode -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownInlineCode.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: MarkdownLinkChild, buf: ByteBuffer) {
        when(value) {
            is MarkdownLinkChild.Text -> {
                buf.putInt(1)
                FfiConverterTypeMarkdownText.write(value.v1, buf)
                Unit
            }
            is MarkdownLinkChild.Strong -> {
                buf.putInt(2)
                FfiConverterTypeMarkdownStrong.write(value.v1, buf)
                Unit
            }
            is MarkdownLinkChild.Emphasis -> {
                buf.putInt(3)
                FfiConverterTypeMarkdownEmphasis.write(value.v1, buf)
                Unit
            }
            is MarkdownLinkChild.Delete -> {
                buf.putInt(4)
                FfiConverterTypeMarkdownDelete.write(value.v1, buf)
                Unit
            }
            is MarkdownLinkChild.InlineCode -> {
                buf.putInt(5)
                FfiConverterTypeMarkdownInlineCode.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class MarkdownParagraphChild {
    
    data class Text(
        val v1: MarkdownText) : MarkdownParagraphChild() {
        companion object
    }
    
    data class Strong(
        val v1: MarkdownStrong) : MarkdownParagraphChild() {
        companion object
    }
    
    data class Emphasis(
        val v1: MarkdownEmphasis) : MarkdownParagraphChild() {
        companion object
    }
    
    data class Delete(
        val v1: MarkdownDelete) : MarkdownParagraphChild() {
        companion object
    }
    
    data class InlineCode(
        val v1: MarkdownInlineCode) : MarkdownParagraphChild() {
        companion object
    }
    
    data class Link(
        val v1: MarkdownLink) : MarkdownParagraphChild() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownParagraphChild : FfiConverterRustBuffer<MarkdownParagraphChild>{
    override fun read(buf: ByteBuffer): MarkdownParagraphChild {
        return when(buf.getInt()) {
            1 -> MarkdownParagraphChild.Text(
                FfiConverterTypeMarkdownText.read(buf),
                )
            2 -> MarkdownParagraphChild.Strong(
                FfiConverterTypeMarkdownStrong.read(buf),
                )
            3 -> MarkdownParagraphChild.Emphasis(
                FfiConverterTypeMarkdownEmphasis.read(buf),
                )
            4 -> MarkdownParagraphChild.Delete(
                FfiConverterTypeMarkdownDelete.read(buf),
                )
            5 -> MarkdownParagraphChild.InlineCode(
                FfiConverterTypeMarkdownInlineCode.read(buf),
                )
            6 -> MarkdownParagraphChild.Link(
                FfiConverterTypeMarkdownLink.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MarkdownParagraphChild) = when(value) {
        is MarkdownParagraphChild.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownText.allocationSize(value.v1)
            )
        }
        is MarkdownParagraphChild.Strong -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownStrong.allocationSize(value.v1)
            )
        }
        is MarkdownParagraphChild.Emphasis -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownEmphasis.allocationSize(value.v1)
            )
        }
        is MarkdownParagraphChild.Delete -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownDelete.allocationSize(value.v1)
            )
        }
        is MarkdownParagraphChild.InlineCode -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownInlineCode.allocationSize(value.v1)
            )
        }
        is MarkdownParagraphChild.Link -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownLink.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: MarkdownParagraphChild, buf: ByteBuffer) {
        when(value) {
            is MarkdownParagraphChild.Text -> {
                buf.putInt(1)
                FfiConverterTypeMarkdownText.write(value.v1, buf)
                Unit
            }
            is MarkdownParagraphChild.Strong -> {
                buf.putInt(2)
                FfiConverterTypeMarkdownStrong.write(value.v1, buf)
                Unit
            }
            is MarkdownParagraphChild.Emphasis -> {
                buf.putInt(3)
                FfiConverterTypeMarkdownEmphasis.write(value.v1, buf)
                Unit
            }
            is MarkdownParagraphChild.Delete -> {
                buf.putInt(4)
                FfiConverterTypeMarkdownDelete.write(value.v1, buf)
                Unit
            }
            is MarkdownParagraphChild.InlineCode -> {
                buf.putInt(5)
                FfiConverterTypeMarkdownInlineCode.write(value.v1, buf)
                Unit
            }
            is MarkdownParagraphChild.Link -> {
                buf.putInt(6)
                FfiConverterTypeMarkdownLink.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class MarkdownRootChild {
    
    data class Paragraph(
        val v1: MarkdownParagraph) : MarkdownRootChild() {
        companion object
    }
    
    data class Heading(
        val v1: MarkdownHeading) : MarkdownRootChild() {
        companion object
    }
    
    data class List(
        val v1: MarkdownList) : MarkdownRootChild() {
        companion object
    }
    
    data class Blockquote(
        val v1: MarkdownBlockquote) : MarkdownRootChild() {
        companion object
    }
    
    data class Code(
        val v1: MarkdownCode) : MarkdownRootChild() {
        companion object
    }
    
    data class ThematicBreak(
        val v1: MarkdownThematicBreak) : MarkdownRootChild() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMarkdownRootChild : FfiConverterRustBuffer<MarkdownRootChild>{
    override fun read(buf: ByteBuffer): MarkdownRootChild {
        return when(buf.getInt()) {
            1 -> MarkdownRootChild.Paragraph(
                FfiConverterTypeMarkdownParagraph.read(buf),
                )
            2 -> MarkdownRootChild.Heading(
                FfiConverterTypeMarkdownHeading.read(buf),
                )
            3 -> MarkdownRootChild.List(
                FfiConverterTypeMarkdownList.read(buf),
                )
            4 -> MarkdownRootChild.Blockquote(
                FfiConverterTypeMarkdownBlockquote.read(buf),
                )
            5 -> MarkdownRootChild.Code(
                FfiConverterTypeMarkdownCode.read(buf),
                )
            6 -> MarkdownRootChild.ThematicBreak(
                FfiConverterTypeMarkdownThematicBreak.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MarkdownRootChild) = when(value) {
        is MarkdownRootChild.Paragraph -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownParagraph.allocationSize(value.v1)
            )
        }
        is MarkdownRootChild.Heading -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownHeading.allocationSize(value.v1)
            )
        }
        is MarkdownRootChild.List -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownList.allocationSize(value.v1)
            )
        }
        is MarkdownRootChild.Blockquote -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownBlockquote.allocationSize(value.v1)
            )
        }
        is MarkdownRootChild.Code -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownCode.allocationSize(value.v1)
            )
        }
        is MarkdownRootChild.ThematicBreak -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMarkdownThematicBreak.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: MarkdownRootChild, buf: ByteBuffer) {
        when(value) {
            is MarkdownRootChild.Paragraph -> {
                buf.putInt(1)
                FfiConverterTypeMarkdownParagraph.write(value.v1, buf)
                Unit
            }
            is MarkdownRootChild.Heading -> {
                buf.putInt(2)
                FfiConverterTypeMarkdownHeading.write(value.v1, buf)
                Unit
            }
            is MarkdownRootChild.List -> {
                buf.putInt(3)
                FfiConverterTypeMarkdownList.write(value.v1, buf)
                Unit
            }
            is MarkdownRootChild.Blockquote -> {
                buf.putInt(4)
                FfiConverterTypeMarkdownBlockquote.write(value.v1, buf)
                Unit
            }
            is MarkdownRootChild.Code -> {
                buf.putInt(5)
                FfiConverterTypeMarkdownCode.write(value.v1, buf)
                Unit
            }
            is MarkdownRootChild.ThematicBreak -> {
                buf.putInt(6)
                FfiConverterTypeMarkdownThematicBreak.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMarkdownListItem: FfiConverterRustBuffer<List<MarkdownListItem>> {
    override fun read(buf: ByteBuffer): List<MarkdownListItem> {
        val len = buf.getInt()
        return List<MarkdownListItem>(len) {
            FfiConverterTypeMarkdownListItem.read(buf)
        }
    }

    override fun allocationSize(value: List<MarkdownListItem>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMarkdownListItem.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MarkdownListItem>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMarkdownListItem.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMarkdownLinkChild: FfiConverterRustBuffer<List<MarkdownLinkChild>> {
    override fun read(buf: ByteBuffer): List<MarkdownLinkChild> {
        val len = buf.getInt()
        return List<MarkdownLinkChild>(len) {
            FfiConverterTypeMarkdownLinkChild.read(buf)
        }
    }

    override fun allocationSize(value: List<MarkdownLinkChild>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMarkdownLinkChild.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MarkdownLinkChild>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMarkdownLinkChild.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMarkdownParagraphChild: FfiConverterRustBuffer<List<MarkdownParagraphChild>> {
    override fun read(buf: ByteBuffer): List<MarkdownParagraphChild> {
        val len = buf.getInt()
        return List<MarkdownParagraphChild>(len) {
            FfiConverterTypeMarkdownParagraphChild.read(buf)
        }
    }

    override fun allocationSize(value: List<MarkdownParagraphChild>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMarkdownParagraphChild.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MarkdownParagraphChild>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMarkdownParagraphChild.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMarkdownRootChild: FfiConverterRustBuffer<List<MarkdownRootChild>> {
    override fun read(buf: ByteBuffer): List<MarkdownRootChild> {
        val len = buf.getInt()
        return List<MarkdownRootChild>(len) {
            FfiConverterTypeMarkdownRootChild.read(buf)
        }
    }

    override fun allocationSize(value: List<MarkdownRootChild>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMarkdownRootChild.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MarkdownRootChild>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMarkdownRootChild.write(it, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias MarkdownCoordinate = kotlin.UShort
public typealias FfiConverterTypeMarkdownCoordinate = FfiConverterUShort

